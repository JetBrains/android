/*
 * Copyright (C) 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.gradle.project.build.output.integration.runsGradleBuild

import com.android.tools.idea.gradle.project.build.invoker.GradleBuildInvoker
import com.android.tools.idea.gradle.project.sync.snapshots.PreparedTestProject
import com.android.tools.idea.gradle.project.sync.snapshots.TemplateBasedTestProject
import com.android.tools.idea.gradle.project.sync.snapshots.TestProjectDefinition.Companion.prepareTestProject
import com.android.tools.idea.gradle.project.sync.snapshots.replaceInContent
import com.android.tools.idea.gradle.project.sync.snapshots.testProjectTemplateFromPath
import com.android.tools.idea.testing.TestProjectPaths
import com.android.tools.idea.testing.buildAndWait
import com.google.common.truth.Truth
import com.google.common.truth.Truth.assertThat
import com.intellij.build.events.BuildEvent
import com.intellij.build.events.BuildIssueEvent
import com.intellij.build.events.FailureResult
import com.intellij.build.events.FileMessageEvent
import com.intellij.build.events.FinishBuildEvent
import com.intellij.build.events.MessageEvent
import com.intellij.build.events.OutputBuildEvent
import com.intellij.build.events.impl.FinishBuildEventImpl
import com.intellij.util.containers.ContainerUtil
import org.junit.Ignore
import org.junit.Test
import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import kotlin.collections.filterIsInstance

class KotlinCompilationErrorIntegrationTest : BuildOutputIntegrationTestBase() {

  @Test
  fun testBrokenCompilationWithoutStacktrace() = testBrokenCompilation(false)

  @Test
  @Ignore("b/278800524") // it currently generates extra messages from stacktrace, need to be addressed separately
  fun testBrokenCompilationWithStacktrace() = testBrokenCompilation(true)

  private fun testBrokenCompilation(withStacktrace: Boolean) {
    val preparedProject = projectRule.prepareTestProject(testProject())

    val brokenFile = preparedProject.root.resolve("mylibrary/src/test/java/com/example/mylibrary/ExampleUnitTest.kt").apply {
      replaceInContent("assertEquals", "assertEqual")
    }

    preparedProject.openAndBuildWithFailingTasks(
      tasks = listOf(":mylibrary:compileDebugUnitTestKotlin"),
      withStacktrace = withStacktrace
    ) { buildEvents, outputsMap ->
      // There should be no failures (generated from exception) on finish event, all compilation errors must be generated by the parsers.
      Truth.assertThat((buildEvents.filterIsInstance<FinishBuildEvent>().single().result as FailureResult).failures).isEmpty()
      Truth.assertThat(buildEvents.filterIsInstance<BuildIssueEvent>()).isEmpty()
      buildEvents.filterIsInstance<MessageEvent>()
        .filter { it.result.kind == MessageEvent.Kind.ERROR }
        .let { events ->
        Truth.assertThat(events).hasSize(1)
        events.firstOrNull()?.let {
          Truth.assertThat(it).isInstanceOf(FileMessageEvent::class.java)
          Truth.assertThat((it as FileMessageEvent).filePosition.file).isEqualTo(brokenFile)
          Truth.assertThat(it.message).startsWith("Unresolved reference 'assertEqual'.")
          Truth.assertThat(it.group).isEqualTo("Kotlin Compiler")
        }
      }
    }

  }

  private fun testProject(): TemplateBasedTestProject = testProjectTemplateFromPath(
    TestProjectPaths.KOTLIN_LIB,
    "tools/adt/idea/android/testData"
  )
}