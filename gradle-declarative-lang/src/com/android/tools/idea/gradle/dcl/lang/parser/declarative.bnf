/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  psiImplUtilClass="com.android.tools.idea.gradle.dcl.lang.psi.PsiImplUtil"
  psiPackage="com.android.tools.idea.gradle.dcl.lang.psi"
  psiImplPackage="com.android.tools.idea.gradle.dcl.lang.psi.impl"
  parserClass="com.android.tools.idea.gradle.dcl.lang.parser.DeclarativeParser"
  parserUtilClass="com.android.tools.idea.gradle.dcl.lang.parser.DeclarativeParserUtil"

  elementTypeHolderClass="com.android.tools.idea.gradle.dcl.lang.parser.DeclarativeElementTypeHolder"
  tokenTypeClass="com.android.tools.idea.gradle.dcl.lang.parser.DeclarativeTokenType"
  elementTypeClass="com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeElementType"
  psiClassPrefix="Declarative"
  psiImplClassSuffix="Impl"

  implements = "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeElement"
  extends="com.intellij.psi.impl.source.tree.CompositePsiElement"
  classHeader='generatedFilesHeader.txt'

  tokens = [
    // Note: we do not generate the lexer from these token definitions (any more) because of the need
    // to support nested comments, and potentially other non-regular constructs.  We need to maintain this
    // list of tokens so that the DeclarativeElementTypeHolder has all necessary fields generated (corresponding
    // to these token names).
    OP_EQ = "="
    OP_PLUS_EQ = "+="
    OP_TO = "to"
    OP_DOT = "."
    OP_LBRACE = "{"
    OP_RBRACE = "}"
    OP_LPAREN = "("
    OP_RPAREN = ")"
    OP_COMMA = ","
    SEMI = ";"
    BLOCK_COMMENT = "BLOCK_COMMENT" // only for declaring this in ElementTypeHolder

    line_comment = "regexp://.*"
    boolean = "regexp:(true|false)"
    null = "null"
    token
    one_line_string_literal
    multiline_string_literal

    // Numbers
    integer_literal
    long_literal
    unsigned_long
    unsigned_integer
    double_literal
  ]

  implements("assignment|block|factory_property_receiver|factory_receiver")=[
     "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeEntry"
     "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeIdentifierOwner"
  ]
  implements("identifier")=[
     "com.intellij.psi.PsiNamedElement"
     "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeElement"
     "com.intellij.psi.NavigatablePsiElement"
  ]
  implements("property|literal|simple_literal|pair")=[
     "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeValue"
  ]
  implements("literal")=[
     "com.intellij.psi.ContributedReferenceHost"
  ]
  implements("embedded_factory")=[
     "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeAbstractFactory"
  ]
  implements("property|assignable_property")=[
     "com.intellij.psi.ContributedReferenceHost"
  ]
  implements("assignable_property")=[
     "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeElement"
  ]

  // DeclarativeReceiverPrefixed<T>
  implements("property")=["com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeReceiverPrefixed<DeclarativeProperty>"]
  implements("assignable_property")=["com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeReceiverPrefixed<DeclarativeAssignableProperty>"]
  implements("property_receiver")=["com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeReceiverPrefixed<DeclarativePropertyReceiver>"]
  implements("factory_receiver")=["com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeReceiverBasedFactory<DeclarativeFactoryReceiver>"]
  implements("factory_property_receiver")=["com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeReceiverBasedFactory<DeclarativePropertyReceiver>"]

  implements("property|property_receiver")=[
    "com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeValueFieldOwner"
  ]
}

entries ::= one_line_entries*
private one_line_entries::=<<atNewLine (entry <<atSameLine (SEMI <<atSameLine entry>>)>>* SEMI?)>>
private entry ::= !<<eof>> !(OP_RBRACE|OP_RPAREN) (assignment | block | factory) {pin=1 recoverWhile=entry_recover}
private entry_recover ::= !(token|OP_RBRACE|OP_RPAREN|SEMI)
assignment ::= lvalue (OP_EQ | OP_PLUS_EQ) expression {
   pin=2
   methods=[
      getValue
      getIdentifier
      getAssignmentType
      factory_receiver=""
      factory_property_receiver=""
   ]
}
private lvalue ::= assignable_property

assignable_property ::= assignable_qualified | assignable_bare {methods=[getField getReceiver getReference getReferences]}
assignable_qualified ::= assignable_property OP_DOT identifier {extends=assignable_property pin=2}
assignable_bare ::= identifier {extends=assignable_property}

identifier ::= token {
   methods=[
     getName
     setName
   ]
   mixin="com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeIdentifierMixin"
}

private atomic_literal ::= multiline_string_literal | one_line_string_literal | double_literal | integer_literal | long_literal | unsigned_long | unsigned_integer | boolean | null
simple_literal ::= atomic_literal { methods=[getValue] }
private compound_literal ::= pair

literal ::= atomic_literal | compound_literal { extends="simple_literal" methods=[getValue getReference getReferences] }
private expression::= factory | pair | property | literal
pair ::= simple_literal pair_operator expression {
  methods=[getFirst getSecond literal="" property="" factory_receiver="" factory_property_receiver=""]
}
pair_operator ::= OP_TO

property ::= qualified | bare { methods=[getField getReceiver getReference getReferences] }
qualified ::= property OP_DOT identifier {extends=property pin=2}
bare ::= identifier {extends=property}

block ::= block_head block_group {
   methods=[
     getIdentifier
     getEntries
     getBlockEntriesStart
     identifier=""
   ]
}
block_group ::= OP_LBRACE block_entries? newline_block_entries* OP_RBRACE {
   pin=1
   methods=[
       getEntries
       getBlockEntriesStart
       factory_receiver=""
       factory_property_receiver=""
       assignment=""
       block=""
   ]
   mixin="com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeBlockMixin"
}
private block_entries ::= block_entry <<atSameLine (SEMI <<atSameLine block_entry>>)>>* SEMI?
private newline_block_entries ::= <<atNewLine block_entries+>>
private block_head ::= (embedded_factory | identifier)
private block_entry ::= !'}' entry
private private_factory ::= identifier OP_LPAREN argumentsList OP_RPAREN {
   pin=2
}

embedded_factory ::= private_factory { // part of block - cannot be independent
   mixin="com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeFactoryMixin"
}

private factory ::=  factory_receiver | factory_property_receiver

factory_property_receiver ::= property_receiver OP_DOT private_factory {
  mixin="com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeFactoryMixin"
  methods=[getReceiver]
}

property_receiver ::= qualified_receiver | bare_receiver {methods=[getField getReceiver]}
// fail parse attempt if next identifier is part of function call
qualified_receiver ::= property_receiver <<notBeforeLParen (OP_DOT identifier)>> {
  extends=property_receiver methods=[getIdentifier] pin=2
}
bare_receiver ::= identifier {extends=property_receiver}
factory_receiver ::= receiver_prefixed_factory | simple_factory  {
  mixin="com.android.tools.idea.gradle.dcl.lang.psi.DeclarativeFactoryMixin"
}
receiver_prefixed_factory ::= factory_receiver OP_DOT private_factory {
  extends=factory_receiver pin=2 methods=[getReceiver]
}
simple_factory ::= private_factory {
  extends=factory_receiver methods=[getReceiver]
}

argumentsList ::= (argumentContainer (OP_COMMA argumentContainer)*)? {
  methods=[getArguments]
}
private argumentContainer ::= argument { // this helps keep error tokens in list but outside of arguments
  pin=1 recoverWhile=argumentRecovery
}
private argumentRecovery ::= !(OP_COMMA|OP_RPAREN)
argument ::= (identifier OP_EQ)? expression {
   methods=[getValue literal="" property="" factory_receiver="" factory_property_receiver="" pair=""]
}
