/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.tests.gui.androidtest

import com.android.tools.idea.bleak.IgnoreList
import com.android.tools.idea.bleak.IgnoreListEntry
import com.android.tools.idea.bleak.StudioBleakOptions
import com.android.tools.idea.bleak.UseBleak
import com.android.tools.idea.bleak.runWithBleak
import com.android.tools.idea.tests.gui.framework.GuiTestRule
import com.intellij.execution.TestStateStorage
import com.intellij.execution.testframework.sm.TestHistoryConfiguration
import com.intellij.execution.testframework.sm.runner.history.actions.AbstractImportTestsAction
import com.intellij.openapi.project.Project
import com.intellij.openapi.util.io.FileUtilRt
import com.intellij.testGuiFramework.framework.GuiTestRemoteRunner
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import java.io.File
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.util.concurrent.TimeUnit

/**
 * A UI test for showing android test results in run tool-window.
 */
@RunWith(GuiTestRemoteRunner::class)
class ImportTestHistoryTest {
  @get:Rule
  val guiTest = GuiTestRule().withTimeout(5, TimeUnit.MINUTES)

  @Test
  @UseBleak
  fun importTestHistoryDoesNotLeakMemoryAfterDisposed() {
    val ideFrameFixture = guiTest.importSimpleApplication()
    createTestHistoryXmlFileInProject(ideFrameFixture.project)
    val bleakOptions = StudioBleakOptions.defaultsWithAdditionalIgnoreList(
      IgnoreList(listOf(
        IgnoreListEntry { it.leaktrace.referenceMatches(2, "java.awt.KeyboardFocusManager", "focusedWindow") },
        IgnoreListEntry { it.leaktrace.element(-1)?.className ==  "com.intellij.util.SmartList" },
        // Number of monitor thread can be increased after new AVD is discovered.
        IgnoreListEntry { it.leaktrace.referenceMatches(3, "com.android.ddmlib.internal.MonitorThread", "group") },
      ))
    )
    runWithBleak(bleakOptions) {
      ideFrameFixture.invokeMenuPath("Run", "Test History", "ExampleInstrumentedTest (1/27/23, 11:11\u202FAM)")
      ideFrameFixture.runToolWindow.apply {
        findContent("ExampleInstrumentedTest")
        close()
      }
      ideFrameFixture.clearNotificationsPresentOnIdeFrame()
    }
  }

  private fun createTestHistoryXmlFileInProject(project: Project) {
    val historyFileName = "ExampleInstrumentedTest - 2023.01.27 at 11h 11m 05s.xml"
    val historyFileContent = """
      <?xml version="1.0" encoding="UTF-8"?><testrun duration="22" footerText="Generated by Android Studio on " name="ExampleInstrumentedTest">
          <count name="total" value="3"/>
          <count name="passed" value="3"/>
          <config nameIsGenerated="true" configId="AndroidTestRunConfigurationType" name="ExampleInstrumentedTest">
              <module name="My_Application.app.androidTest"/>
              <option name="TESTING_TYPE" value="2"/>
              <option name="METHOD_NAME" value=""/>
              <option name="CLASS_NAME" value="com.example.myapplication.ExampleInstrumentedTest"/>
              <option name="PACKAGE_NAME" value=""/>
              <option name="TEST_NAME_REGEX" value=""/>
              <option name="INSTRUMENTATION_RUNNER_CLASS" value=""/>
              <option name="EXTRA_OPTIONS" value=""/>
              <option name="RETENTION_ENABLED" value="No"/>
              <option name="RETENTION_MAX_SNAPSHOTS" value="2"/>
              <option name="RETENTION_COMPRESS_SNAPSHOTS" value="false"/>
              <option name="CLEAR_LOGCAT" value="false"/>
              <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false"/>
              <option name="INSPECTION_WITHOUT_ACTIVITY_RESTART" value="false"/>
              <option name="TARGET_SELECTION_MODE" value="DEVICE_AND_SNAPSHOT_COMBO_BOX"/>
              <option name="SELECTED_CLOUD_MATRIX_CONFIGURATION_ID" value="-1"/>
              <option name="SELECTED_CLOUD_MATRIX_PROJECT_ID" value=""/>
              <option name="DEBUGGER_TYPE" value="Java"/>
              <Java/>
              <Profilers>
                  <option name="ADVANCED_PROFILING_ENABLED" value="false"/>
                  <option name="STARTUP_PROFILING_ENABLED" value="false"/>
                  <option name="STARTUP_CPU_PROFILING_ENABLED" value="false"/>
                  <option name="STARTUP_CPU_PROFILING_CONFIGURATION_NAME" value="Java/Kotlin Method Sample (legacy)"/>
                  <option name="STARTUP_NATIVE_MEMORY_PROFILING_ENABLED" value="false"/>
                  <option name="NATIVE_MEMORY_SAMPLE_RATE_BYTES" value="2048"/>
              </Profilers>
          </config>
          <suite name="com.example.myapplication.ExampleInstrumentedTest" duration="22" status="passed">
              <test name="useAppContext1" duration="21" status="passed">
                  <output type="stdout">01-27 11:11:02.714  3245  3283 I TestRunner: started: useAppContext1(com.example.myapplication.ExampleInstrumentedTest)
      01-27 11:11:02.719  3245  3283 I TestRunner: finished: useAppContext1(com.example.myapplication.ExampleInstrumentedTest)
      </output>
              </test>
              <test name="useAppContext2" duration="0" status="passed">
                  <output type="stdout">01-27 11:11:02.723  3245  3283 I TestRunner: started: useAppContext2(com.example.myapplication.ExampleInstrumentedTest)
      01-27 11:11:02.724  3245  3283 I TestRunner: finished: useAppContext2(com.example.myapplication.ExampleInstrumentedTest)
      </output>
              </test>
              <test name="useAppContext3" duration="1" status="passed">
                  <output type="stdout">01-27 11:11:02.727  3245  3283 I TestRunner: started: useAppContext3(com.example.myapplication.ExampleInstrumentedTest)
      01-27 11:11:02.729  3245  3283 I TestRunner: finished: useAppContext3(com.example.myapplication.ExampleInstrumentedTest)
      </output>
              </test>
          </suite>
          <androidTestMatrix executionDuration="23291">
              <device id="123456789" deviceName="" deviceType="LOCAL_PHYSICAL_DEVICE" version="33">
                  <additionalInfo key="SerialNumber" value="123456789"/>
                  <additionalInfo key="RAM" value="5.6 GB"/>
                  <additionalInfo key="Manufacturer" value="Google&#10;"/>
                  <additionalInfo key="Model" value="Pixel 4&#10;"/>
              </device>
              <testsuite deviceId="123456789" testCount="3" result="PASSED">
                  <testcase id="com.example.myapplication.ExampleInstrumentedTest.useAppContext1" methodName="useAppContext1" className="ExampleInstrumentedTest" packageName="com.example.myapplication" result="PASSED" logcat="01-27 11:11:02.714  3245  3283 I TestRunner: started: useAppContext1(com.example.myapplication.ExampleInstrumentedTest)&#10;01-27 11:11:02.719  3245  3283 I TestRunner: finished: useAppContext1(com.example.myapplication.ExampleInstrumentedTest)&#10;" errorStackTrace="" startTimestampMillis="1674846664485" endTimestampMillis="1674846664506" benchmark=""/>
                  <testcase id="com.example.myapplication.ExampleInstrumentedTest.useAppContext2" methodName="useAppContext2" className="ExampleInstrumentedTest" packageName="com.example.myapplication" result="PASSED" logcat="01-27 11:11:02.723  3245  3283 I TestRunner: started: useAppContext2(com.example.myapplication.ExampleInstrumentedTest)&#10;01-27 11:11:02.724  3245  3283 I TestRunner: finished: useAppContext2(com.example.myapplication.ExampleInstrumentedTest)&#10;" errorStackTrace="" startTimestampMillis="1674846664515" endTimestampMillis="1674846664515" benchmark=""/>
                  <testcase id="com.example.myapplication.ExampleInstrumentedTest.useAppContext3" methodName="useAppContext3" className="ExampleInstrumentedTest" packageName="com.example.myapplication" result="PASSED" logcat="01-27 11:11:02.727  3245  3283 I TestRunner: started: useAppContext3(com.example.myapplication.ExampleInstrumentedTest)&#10;01-27 11:11:02.729  3245  3283 I TestRunner: finished: useAppContext3(com.example.myapplication.ExampleInstrumentedTest)&#10;" errorStackTrace="" startTimestampMillis="1674846664516" endTimestampMillis="1674846664517" benchmark=""/>
              </testsuite>
          </androidTestMatrix>
      </testrun>
    """.trimIndent()

    val outputFile = File(TestStateStorage.getTestHistoryRoot(project), historyFileName)
    FileUtilRt.createParentDirs(outputFile)
    Files.write(outputFile.toPath(), historyFileContent.toByteArray(StandardCharsets.UTF_8))
    AbstractImportTestsAction.adjustHistory(project)
    TestHistoryConfiguration.getInstance(project).registerHistoryItem(
      historyFileName, "ExampleInstrumentedTest", "AndroidTestRunConfigurationType")
  }
}