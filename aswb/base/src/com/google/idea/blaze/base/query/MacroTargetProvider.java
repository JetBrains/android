/*
 * Copyright 2019 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.idea.blaze.base.query;

import com.google.common.collect.ImmutableList;
import com.google.idea.blaze.base.model.primitives.Label;
import com.intellij.openapi.extensions.ExtensionPointName;
import com.intellij.openapi.project.Project;
import java.util.Arrays;
import java.util.Objects;
import javax.annotation.Nullable;

/** Finds all targets in a single package generated by a macro. */
public interface MacroTargetProvider {

  ExtensionPointName<MacroTargetProvider> EP_NAME =
      ExtensionPointName.create("com.google.idea.blaze.MacroTargetProvider");

  /**
   * Synchronously queries the list of all targets generated by macros in the given package.
   *
   * <p>Returns an empty list if no targets were found, or if no providers were able to to handle
   * this package. Otherwise returns the first non-empty result from the list of providers.
   */
  static ImmutableList<GeneratedTarget> findTargetsGeneratedByMacros(
      Project project, Label buildPackage) {
    return Arrays.stream(EP_NAME.getExtensions())
        .map(p -> p.doFindTargets(project, buildPackage))
        .filter(Objects::nonNull)
        .findFirst()
        .orElse(ImmutableList.of());
  }

  /** Returns null if this provider isn't able to handle the given package. */
  @Nullable
  ImmutableList<GeneratedTarget> doFindTargets(Project project, Label buildPackage);
}
