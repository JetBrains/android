/*
 * Copyright 2024 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.example.project

/**
 * Simple class to repro a Kotlin validation corner case.
 *
 * The corner case is: we have a class generated by an annotation processor, {@code
 * AnnotatedClass_Generated}. That class implements [com.example.external.Interface], where the
 * generic parameter is an internal class (see the comment in
 * [com.example.project.OuterClass.AnnotatedClass]). This results in a two-way dependency between
 * the project and its dependencies: [KotlinClass] (project) -> [AnnotatedClass_Generated] (ext) ->
 * [OuterClass.AnnotatedClass] (project).
 */
public class KotlinClass(private val generatedClass: AnnotatedClass_Generated) {

  fun testMethod() {
    generatedClass.projectClass().sayHello()
  }
}
