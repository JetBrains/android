// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: LogcatFilter.flex

/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Defines tokens in the Logcat Filter Query Language. The language is based on the Buganizer query language specific fields can be queried
 * independently but also, a general query. For example:
 *
 *    foo bar tag: MyTag package: com.example.app
 *
 * Matches log lines that
 *
 *   TAG.contains("MyTag") && PACKAGE.contains("com.example.app") && line.contains("foo bar")
 *
 * Definitions:
 *   term: A top level entity which can either be a string value or a key-value pair
 *   key-term: A key-value term. Matches a field named by the key with the value.
 *   value-term: A top level entity representing a string. Matches the entire log line with the value.
 *
 * There are 2 types of keys. String keys can accept quoted or unquoted values while regular keys can only take an unquoted value with no
 * whitespace. String keys can also be negated and can specify a regex match:
 * String keys examples:
 *     tag: foo
 *     tag: fo\ o
 *     tag: 'foo'
 *     tag: 'fo\'o'
 *     tag: "foo"
 *     tag: "fo\"o"
 *     -tag: foo
 *     tag~: foo|bar
 *
 * Logical operations & (and), | (or) are supported as well as parenthesis.
 *
 * Implicit grouping:
 * Terms without logical operations between them are treated as an implicit AND unless they are value terms:
 *
 *   foo bar tag: MyTag -> line.contains("foo bar") && tag.contains("MyTag")
 *
 * This file is used by Grammar-Kit to generate the lexer, parser, node types and PSI classes.
 */
package com.android.tools.idea.logcat.filters.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.android.tools.idea.logcat.filters.parser.*;
import com.intellij.psi.TokenType;


class LogcatFilterLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_KVALUE_STATE = 2;
  public static final int REGEX_KVALUE_STATE = 4;
  public static final int KVALUE_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\2\1\0\1\3\3\0\1\4"+
    "\1\5\1\6\1\7\3\0\1\10\14\0\1\11\2\0"+
    "\1\12\36\0\1\13\4\0\1\14\1\0\1\15\1\0"+
    "\1\16\1\0\1\17\1\0\1\20\1\0\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\0\1\27\1\30\1\31"+
    "\1\0\1\32\5\0\1\33\1\0\1\34\6\0\1\1"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\10\1\1\7\1\10\3\3\1\11\2\3\1\12\1\1"+
    "\1\0\1\1\3\0\12\1\1\10\1\0\1\10\3\0"+
    "\1\11\1\0\1\11\3\0\2\1\1\13\6\1\2\10"+
    "\2\11\3\1\1\14\4\1\1\15\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\164"+
    "\0\313\0\350\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179"+
    "\0\u0196\0\u01b3\0\u01d0\0\164\0\u01ed\0\u020a\0\u0227\0\350"+
    "\0\u0244\0\u0261\0\u027e\0\u029b\0\u02b8\0\256\0\350\0\u02d5"+
    "\0\313\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383\0\u03a0"+
    "\0\u03bd\0\u03da\0\u03f7\0\u0414\0\u0431\0\u020a\0\350\0\u044e"+
    "\0\u0227\0\u046b\0\u0488\0\u0261\0\350\0\u04a5\0\u027e\0\u04c2"+
    "\0\256\0\313\0\350\0\u04df\0\u04fc\0\u0519\0\u0536\0\u0553"+
    "\0\u0570\0\u020a\0\u0227\0\u0261\0\u027e\0\u058d\0\u05aa\0\u05c7"+
    "\0\350\0\u05e4\0\u0601\0\u061e\0\u063b\0\350\0\u0658";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\3\5\1\15\3\5\1\16\1\5\1\17\1\20\1\21"+
    "\1\5\1\22\2\5\1\23\1\5\1\24\1\5\1\25"+
    "\2\6\1\26\1\25\1\27\2\30\25\25\1\31\2\6"+
    "\1\32\1\31\1\33\2\30\25\31\1\34\2\6\32\34"+
    "\1\5\2\0\3\5\2\0\1\5\1\0\1\5\1\35"+
    "\21\5\1\0\2\6\32\0\3\36\1\37\7\36\1\40"+
    "\21\36\5\41\1\37\5\41\1\42\21\41\35\0\1\5"+
    "\2\0\3\5\2\0\1\5\1\0\1\5\1\35\6\5"+
    "\1\43\1\20\2\5\1\22\2\5\1\23\4\5\2\0"+
    "\3\5\2\0\1\5\1\0\1\5\1\35\3\5\1\44"+
    "\16\5\2\0\3\5\2\0\1\5\1\0\1\5\1\35"+
    "\14\5\1\45\5\5\2\0\3\5\2\0\1\5\1\0"+
    "\1\5\1\35\2\5\1\46\1\5\1\47\15\5\2\0"+
    "\3\5\2\0\1\5\1\0\1\5\1\35\2\5\1\50"+
    "\17\5\2\0\3\5\2\0\1\5\1\0\1\5\1\35"+
    "\1\51\21\5\2\0\3\5\2\0\1\5\1\0\1\5"+
    "\1\35\1\52\12\5\1\53\6\5\2\0\3\5\2\0"+
    "\1\5\1\0\1\5\1\35\1\54\20\5\1\25\2\0"+
    "\3\25\2\0\3\25\1\55\21\25\3\56\1\57\7\56"+
    "\1\60\21\56\5\61\1\57\5\61\1\62\21\61\1\31"+
    "\2\0\3\31\2\0\3\31\1\63\21\31\3\64\1\65"+
    "\7\64\1\66\21\64\5\67\1\65\5\67\1\70\21\67"+
    "\1\34\2\0\32\34\1\5\1\0\4\5\2\0\3\5"+
    "\1\35\21\5\3\36\1\71\7\36\1\40\21\36\5\41"+
    "\1\72\5\41\1\42\21\41\1\5\2\0\3\5\2\0"+
    "\1\5\1\0\1\5\1\35\4\5\1\47\15\5\2\0"+
    "\3\5\2\0\1\5\1\0\1\5\1\35\2\5\1\45"+
    "\17\5\2\0\3\5\2\0\1\5\1\73\1\5\1\35"+
    "\22\5\2\0\3\5\2\0\1\5\1\0\1\5\1\35"+
    "\16\5\1\74\3\5\2\0\3\5\2\0\1\5\1\0"+
    "\1\5\1\35\10\5\1\75\11\5\2\0\3\5\2\0"+
    "\1\5\1\0\1\5\1\35\14\5\1\76\5\5\2\0"+
    "\3\5\2\0\1\5\1\0\1\5\1\35\7\5\1\44"+
    "\12\5\2\0\3\5\2\0\1\5\1\0\1\5\1\35"+
    "\1\5\1\77\20\5\2\0\3\5\2\0\1\5\1\0"+
    "\1\5\1\35\11\5\1\100\10\5\2\0\3\5\2\0"+
    "\1\5\1\0\1\5\1\35\3\5\1\101\15\5\1\25"+
    "\1\0\4\25\2\0\3\25\1\55\21\25\3\56\1\102"+
    "\7\56\1\60\21\56\5\61\1\103\5\61\1\62\21\61"+
    "\1\31\1\0\4\31\2\0\3\31\1\63\21\31\3\64"+
    "\1\104\7\64\1\66\21\64\5\67\1\105\5\67\1\70"+
    "\21\67\1\5\2\0\3\5\2\0\1\5\1\0\1\5"+
    "\1\35\2\5\1\106\17\5\2\0\3\5\2\0\1\5"+
    "\1\0\1\5\1\35\2\5\1\101\17\5\2\0\3\5"+
    "\2\0\1\5\1\0\1\5\1\35\14\5\1\107\5\5"+
    "\2\0\3\5\2\0\1\5\1\0\1\5\1\35\5\5"+
    "\1\107\14\5\2\0\3\5\2\0\1\5\1\0\1\5"+
    "\1\35\1\5\1\110\20\5\2\0\3\5\2\0\1\5"+
    "\1\111\1\112\1\35\20\5\1\113\1\5\2\0\3\5"+
    "\2\0\1\5\1\0\1\5\1\35\6\5\1\45\13\5"+
    "\2\0\3\5\2\0\1\5\1\0\1\5\1\35\1\114"+
    "\21\5\2\0\3\5\2\0\1\5\1\0\1\5\1\35"+
    "\2\5\1\115\17\5\2\0\3\5\2\0\1\5\1\111"+
    "\1\5\1\35\22\5\2\0\3\5\2\0\1\5\1\116"+
    "\1\5\1\35\22\5\2\0\3\5\2\0\1\5\1\0"+
    "\1\5\1\35\3\5\1\75\16\5\2\0\3\5\2\0"+
    "\1\5\1\0\1\5\1\35\14\5\1\117\5\5\2\0"+
    "\3\5\2\0\1\5\1\0\1\5\1\35\14\5\1\101"+
    "\4\5";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1653];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\5\1\2\11\14\1\1\11\5\1\1\0\1\11"+
    "\3\0\13\1\1\0\1\11\3\0\1\1\1\0\1\11"+
    "\3\0\2\1\1\11\15\1\1\11\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LogcatFilterLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return LogcatFilterTypes.VALUE;
            }
          // fall through
          case 14: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 15: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 16: break;
          case 4:
            { return LogcatFilterTypes.AND;
            }
          // fall through
          case 17: break;
          case 5:
            { return LogcatFilterTypes.LPAREN;
            }
          // fall through
          case 18: break;
          case 6:
            { return LogcatFilterTypes.RPAREN;
            }
          // fall through
          case 19: break;
          case 7:
            { return LogcatFilterTypes.OR;
            }
          // fall through
          case 20: break;
          case 8:
            { yybegin(YYINITIAL); return LogcatFilterTypes.STRING_KVALUE;
            }
          // fall through
          case 21: break;
          case 9:
            { yybegin(YYINITIAL); return LogcatFilterTypes.REGEX_KVALUE;
            }
          // fall through
          case 22: break;
          case 10:
            { yybegin(YYINITIAL); return LogcatFilterTypes.KVALUE;
            }
          // fall through
          case 23: break;
          case 11:
            { yybegin(KVALUE_STATE); return LogcatFilterTypes.KEY;
            }
          // fall through
          case 24: break;
          case 12:
            { yybegin(STRING_KVALUE_STATE); return LogcatFilterTypes.STRING_KEY;
            }
          // fall through
          case 25: break;
          case 13:
            { yybegin(REGEX_KVALUE_STATE); return LogcatFilterTypes.REGEX_KEY;
            }
          // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
