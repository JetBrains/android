// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _DeviceSpecLexer.flex

package com.android.tools.idea.preview.util.device.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.preview.util.device.parser.DeviceSpecTypes.*;


public class _DeviceSpecLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DIMENSION_PARAM_VALUE = 2;
  public static final int STRING_PARAM = 4;
  public static final int STRING_VALUE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\0\1\3\11\0"+
    "\1\4\1\0\1\5\1\0\12\6\1\7\2\0\1\10"+
    "\3\0\21\11\1\12\1\13\7\11\1\0\1\14\2\0"+
    "\1\15\1\0\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\11\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\11\1\44\12\0\1\2\32\0\1\1\11\0"+
    "\1\11\12\0\1\11\4\0\1\11\5\0\27\11\1\0"+
    "\37\11\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0"+
    "\1\11\1\0\1\11\201\0\5\11\1\0\2\11\2\0"+
    "\4\11\1\0\1\11\6\0\1\11\1\0\3\11\1\0"+
    "\1\11\1\0\24\11\1\0\123\11\1\0\213\11\10\0"+
    "\246\11\1\0\46\11\2\0\1\11\6\0\51\11\107\0"+
    "\33\11\4\0\4\11\55\0\53\11\25\0\12\11\4\0"+
    "\2\11\1\0\143\11\1\0\1\11\17\0\2\11\7\0"+
    "\17\11\2\0\1\11\20\0\1\11\1\0\36\11\35\0"+
    "\131\11\13\0\1\11\16\0\53\11\11\0\2\11\4\0"+
    "\1\11\5\0\26\11\4\0\1\11\11\0\1\11\3\0"+
    "\1\11\27\0\31\11\7\0\13\11\65\0\25\11\1\0"+
    "\10\11\106\0\66\11\3\0\1\11\22\0\1\11\7\0"+
    "\12\11\4\0\12\11\1\0\20\11\4\0\10\11\2\0"+
    "\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0"+
    "\4\11\3\0\1\11\20\0\1\11\15\0\2\11\1\0"+
    "\3\11\4\0\14\11\12\0\1\11\10\0\6\11\4\0"+
    "\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0"+
    "\2\11\1\0\2\11\37\0\4\11\1\0\1\11\7\0"+
    "\12\11\2\0\3\11\20\0\11\11\1\0\3\11\1\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\5\11\3\0"+
    "\1\11\22\0\1\11\17\0\2\11\4\0\12\11\11\0"+
    "\1\11\13\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\3\0\1\11\36\0"+
    "\2\11\1\0\3\11\4\0\12\11\1\0\1\11\21\0"+
    "\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0"+
    "\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0"+
    "\3\11\3\0\14\11\26\0\1\11\25\0\12\11\25\0"+
    "\10\11\1\0\3\11\1\0\27\11\1\0\20\11\3\0"+
    "\1\11\32\0\3\11\5\0\2\11\4\0\12\11\20\0"+
    "\1\11\4\0\10\11\1\0\3\11\1\0\27\11\1\0"+
    "\12\11\1\0\5\11\3\0\1\11\40\0\1\11\1\0"+
    "\2\11\4\0\12\11\1\0\2\11\22\0\10\11\1\0"+
    "\3\11\1\0\51\11\2\0\1\11\20\0\1\11\5\0"+
    "\3\11\10\0\3\11\4\0\12\11\12\0\6\11\5\0"+
    "\22\11\3\0\30\11\1\0\11\11\1\0\1\11\2\0"+
    "\7\11\37\0\12\11\21\0\60\11\1\0\2\11\14\0"+
    "\7\11\11\0\12\11\47\0\2\11\1\0\1\11\1\0"+
    "\5\11\1\0\30\11\1\0\1\11\1\0\12\11\1\0"+
    "\2\11\11\0\1\11\2\0\5\11\1\0\1\11\11\0"+
    "\12\11\2\0\4\11\40\0\1\11\37\0\12\11\26\0"+
    "\10\11\1\0\44\11\33\0\5\11\163\0\53\11\24\0"+
    "\13\11\6\0\6\11\4\0\4\11\3\0\1\11\3\0"+
    "\2\11\7\0\3\11\4\0\15\11\14\0\1\11\1\0"+
    "\12\11\6\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\53\11\1\0\115\11\1\0\4\11\2\0\7\11\1\0"+
    "\1\11\1\0\4\11\2\0\51\11\1\0\4\11\2\0"+
    "\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0"+
    "\4\11\2\0\17\11\1\0\71\11\1\0\4\11\2\0"+
    "\103\11\45\0\20\11\20\0\126\11\2\0\6\11\3\0"+
    "\u016c\11\2\0\21\11\1\1\32\11\5\0\113\11\6\0"+
    "\10\11\7\0\15\11\1\0\4\11\16\0\22\11\16\0"+
    "\22\11\16\0\15\11\1\0\3\11\17\0\64\11\43\0"+
    "\1\11\4\0\1\11\3\0\12\11\46\0\12\11\6\0"+
    "\131\11\7\0\5\11\2\0\42\11\1\0\1\11\5\0"+
    "\106\11\12\0\37\11\47\0\50\11\2\0\5\11\13\0"+
    "\54\11\4\0\32\11\6\0\12\11\46\0\27\11\11\0"+
    "\65\11\53\0\12\11\6\0\12\11\15\0\1\11\135\0"+
    "\57\11\21\0\7\11\4\0\12\11\51\0\36\11\15\0"+
    "\70\11\32\0\44\11\34\0\12\11\3\0\61\11\2\0"+
    "\11\11\7\0\53\11\2\0\3\11\51\0\4\11\1\0"+
    "\6\11\1\0\2\11\3\0\1\11\5\0\300\11\100\0"+
    "\26\11\2\0\6\11\2\0\46\11\2\0\6\11\2\0"+
    "\10\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0"+
    "\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0"+
    "\15\11\5\0\3\11\1\0\7\11\3\0\13\1\35\0"+
    "\2\2\5\0\1\1\57\0\1\1\21\0\1\11\15\0"+
    "\1\11\20\0\15\11\145\0\1\11\4\0\1\11\2\0"+
    "\12\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\4\11\1\0\13\11\2\0"+
    "\4\11\5\0\5\11\4\0\1\11\64\0\2\11\u017b\0"+
    "\57\11\1\0\57\11\1\0\205\11\6\0\4\11\3\0"+
    "\2\11\14\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\70\11\7\0\1\11\20\0\27\11\11\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\120\0\1\11\320\0"+
    "\1\1\4\0\2\11\52\0\5\11\5\0\2\11\4\0"+
    "\126\11\6\0\3\11\1\0\132\11\1\0\4\11\5\0"+
    "\53\11\1\0\136\11\21\0\33\11\65\0\306\11\112\0"+
    "\360\11\20\0\215\11\103\0\56\11\2\0\15\11\3\0"+
    "\34\11\24\0\57\11\20\0\37\11\2\0\106\11\61\0"+
    "\11\11\2\0\147\11\2\0\65\11\2\0\5\11\60\0"+
    "\13\11\1\0\3\11\1\0\4\11\1\0\27\11\35\0"+
    "\64\11\16\0\62\11\34\0\12\11\30\0\6\11\3\0"+
    "\1\11\1\0\2\11\1\0\46\11\12\0\27\11\31\0"+
    "\35\11\7\0\57\11\34\0\13\11\6\0\5\11\1\0"+
    "\31\11\1\0\51\11\27\0\3\11\1\0\10\11\4\0"+
    "\12\11\6\0\27\11\3\0\1\11\3\0\62\11\1\0"+
    "\1\11\3\0\2\11\2\0\5\11\2\0\1\11\1\0"+
    "\1\11\30\0\3\11\2\0\13\11\7\0\3\11\14\0"+
    "\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0"+
    "\7\11\1\0\53\11\1\0\14\11\10\0\163\11\15\0"+
    "\12\11\6\0\244\11\14\0\27\11\4\0\61\11\4\0"+
    "\u0100\45\156\11\2\0\152\11\46\0\7\11\14\0\5\11"+
    "\5\0\1\11\1\0\12\11\1\0\15\11\1\0\5\11"+
    "\1\0\1\11\1\0\2\11\1\0\2\11\1\0\154\11"+
    "\41\0\153\11\22\0\100\11\2\0\66\11\50\0\14\11"+
    "\164\0\5\11\1\0\207\11\23\0\12\11\7\0\32\11"+
    "\6\0\32\11\13\0\131\11\3\0\6\11\2\0\6\11"+
    "\2\0\6\11\2\0\3\11\43\0\14\11\1\0\32\11"+
    "\1\0\23\11\1\0\2\11\1\0\17\11\2\0\16\11"+
    "\42\0\173\11\205\0\35\11\3\0\61\11\57\0\40\11"+
    "\15\0\24\11\1\0\10\11\6\0\46\11\12\0\36\11"+
    "\2\0\44\11\4\0\10\11\60\0\236\11\2\0\12\11"+
    "\6\0\44\11\4\0\44\11\4\0\50\11\10\0\64\11"+
    "\234\0\67\11\11\0\26\11\12\0\10\11\230\0\6\11"+
    "\2\0\1\11\1\0\54\11\1\0\2\11\3\0\1\11"+
    "\2\0\27\11\12\0\27\11\11\0\37\11\101\0\23\11"+
    "\1\0\2\11\12\0\26\11\12\0\32\11\106\0\70\11"+
    "\6\0\2\11\100\0\1\11\17\0\4\11\1\0\3\11"+
    "\1\0\35\11\52\0\35\11\3\0\35\11\43\0\10\11"+
    "\1\0\34\11\33\0\66\11\12\0\26\11\12\0\23\11"+
    "\15\0\22\11\156\0\111\11\67\0\63\11\15\0\63\11"+
    "\15\0\44\11\14\0\12\11\306\0\35\11\12\0\1\11"+
    "\10\0\26\11\232\0\27\11\14\0\65\11\56\0\12\11"+
    "\23\0\55\11\40\0\31\11\7\0\12\11\11\0\44\11"+
    "\17\0\12\11\4\0\1\11\13\0\43\11\3\0\1\11"+
    "\14\0\60\11\16\0\4\11\13\0\13\11\1\0\1\11"+
    "\43\0\22\11\1\0\31\11\124\0\7\11\1\0\1\11"+
    "\1\0\4\11\1\0\17\11\1\0\12\11\7\0\57\11"+
    "\21\0\12\11\13\0\10\11\2\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\5\11\3\0\1\11"+
    "\22\0\1\11\14\0\5\11\236\0\65\11\22\0\4\11"+
    "\5\0\12\11\5\0\1\11\40\0\60\11\24\0\2\11"+
    "\1\0\1\11\10\0\12\11\246\0\57\11\51\0\4\11"+
    "\44\0\60\11\24\0\1\11\13\0\12\11\46\0\53\11"+
    "\15\0\1\11\7\0\12\11\66\0\33\11\25\0\12\11"+
    "\306\0\54\11\164\0\112\11\25\0\1\11\240\0\10\11"+
    "\2\0\47\11\20\0\1\11\1\0\1\11\34\0\1\11"+
    "\12\0\50\11\7\0\1\11\25\0\1\11\13\0\56\11"+
    "\23\0\1\11\42\0\71\11\7\0\11\11\1\0\45\11"+
    "\21\0\1\11\17\0\12\11\30\0\36\11\160\0\7\11"+
    "\1\0\2\11\1\0\46\11\25\0\1\11\11\0\12\11"+
    "\6\0\6\11\1\0\2\11\1\0\40\11\16\0\1\11"+
    "\7\0\12\11\u0136\0\23\11\15\0\232\11\346\0\304\11"+
    "\274\0\57\11\321\0\107\11\271\0\71\11\7\0\37\11"+
    "\1\0\12\11\146\0\36\11\22\0\60\11\20\0\4\11"+
    "\14\0\12\11\11\0\25\11\5\0\23\11\260\0\100\11"+
    "\200\0\113\11\5\0\1\11\102\0\15\11\100\0\2\11"+
    "\1\0\1\11\34\0\370\11\10\0\363\11\15\0\37\11"+
    "\61\0\3\11\21\0\4\11\10\0\u018c\11\4\0\153\11"+
    "\5\0\15\11\3\0\11\11\7\0\12\11\146\0\125\11"+
    "\1\0\107\11\1\0\2\11\2\0\1\11\2\0\2\11"+
    "\2\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11"+
    "\1\0\101\11\1\0\4\11\2\0\10\11\1\0\7\11"+
    "\1\0\34\11\1\0\4\11\1\0\5\11\1\0\1\11"+
    "\3\0\7\11\1\0\u0154\11\2\0\31\11\1\0\31\11"+
    "\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\10\11\2\0\137\11\12\0\7\11\2\0\12\11"+
    "\4\0\1\11\u0171\0\54\11\4\0\12\11\6\0\305\11"+
    "\73\0\104\11\7\0\1\11\4\0\12\11\246\0\4\11"+
    "\1\0\33\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11"+
    "\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11"+
    "\1\0\4\11\1\0\4\11\1\0\1\11\1\0\12\11"+
    "\1\0\21\11\5\0\3\11\1\0\5\11\1\0\21\11"+
    "\104\0\327\11\51\0\65\11\13\0\336\11\2\0\u0182\11"+
    "\16\0\u0131\11\37\0\36\11\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\17\7"+
    "\1\10\1\4\5\1\1\11\3\1\1\7\1\0\5\7"+
    "\1\12\3\7\1\13\10\7\1\14\5\7\2\0\1\12"+
    "\1\0\1\14\1\0\1\15\2\0\1\4\5\7\1\16"+
    "\21\7\1\4\5\0\13\7\1\17\4\7\1\20\1\7"+
    "\1\21\1\22\1\7\3\0\1\23\1\0\5\7\1\24"+
    "\12\7\1\25\2\0\1\26\1\0\2\7\1\27\1\30"+
    "\1\31\7\7\1\32\1\0\1\33\1\34\1\35\1\7"+
    "\1\36\1\37\5\7\1\0\3\7\1\40\1\7\1\41"+
    "\1\42\3\7\1\43\1\7\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\230\0\344"+
    "\0\230\0\230\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8"+
    "\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8"+
    "\0\u031e\0\230\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402"+
    "\0\230\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c"+
    "\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u010a"+
    "\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746"+
    "\0\u010a\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850"+
    "\0\230\0\u0876\0\230\0\u089c\0\230\0\u08c2\0\u08e8\0\u010a"+
    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u010a\0\u09cc\0\u09f2"+
    "\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22"+
    "\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\230"+
    "\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c"+
    "\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c"+
    "\0\u010a\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u010a\0\u0f4a\0\u010a"+
    "\0\u010a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\230\0\u1008\0\u102e"+
    "\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u010a\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u010a"+
    "\0\u1268\0\u128e\0\230\0\u12b4\0\u12da\0\u1300\0\u010a\0\u010a"+
    "\0\u010a\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a"+
    "\0\u010a\0\u1430\0\230\0\230\0\u010a\0\u1456\0\u010a\0\u010a"+
    "\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586"+
    "\0\u15ac\0\u010a\0\u15d2\0\230\0\u010a\0\u15f8\0\u161e\0\u1644"+
    "\0\u010a\0\u166a\0\u010a\0\u010a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\5\1\7\1\5\1\10\1\11\1\12"+
    "\3\13\2\5\1\13\1\14\1\15\1\16\1\13\1\17"+
    "\1\20\1\21\1\22\1\23\1\13\1\24\1\25\1\26"+
    "\2\13\1\27\1\30\2\13\1\31\2\13\2\5\2\6"+
    "\1\5\1\32\1\5\1\33\1\5\1\12\7\5\1\34"+
    "\1\35\3\5\1\36\5\5\1\37\6\5\1\40\4\5"+
    "\2\6\4\5\2\41\15\5\1\42\2\5\1\43\1\5"+
    "\1\44\16\5\1\32\1\5\1\13\1\11\1\12\3\13"+
    "\2\5\27\13\1\5\47\0\2\6\43\0\3\13\2\0"+
    "\1\45\1\10\2\0\3\13\1\46\34\13\2\0\2\13"+
    "\2\0\3\13\1\46\34\13\2\0\2\13\2\0\3\13"+
    "\1\46\23\13\1\47\10\13\2\0\2\13\2\0\3\13"+
    "\1\46\10\13\1\50\4\13\1\51\5\13\1\52\10\13"+
    "\2\0\2\13\2\0\3\13\1\46\15\13\1\53\1\54"+
    "\15\13\2\0\2\13\2\0\3\13\1\46\1\13\1\55"+
    "\32\13\2\0\2\13\2\0\3\13\1\46\5\13\1\56"+
    "\26\13\2\0\2\13\2\0\3\13\1\46\5\13\1\57"+
    "\26\13\2\0\2\13\2\0\3\13\1\46\4\13\1\60"+
    "\14\13\1\61\12\13\2\0\2\13\2\0\3\13\1\46"+
    "\1\13\1\62\32\13\2\0\2\13\2\0\3\13\1\46"+
    "\1\13\1\63\13\13\1\64\16\13\2\0\2\13\2\0"+
    "\3\13\1\46\20\13\1\65\13\13\2\0\2\13\2\0"+
    "\3\13\1\46\1\13\1\66\13\13\1\67\5\13\1\70"+
    "\2\13\1\71\5\13\2\0\2\13\2\0\3\13\1\46"+
    "\16\13\1\72\1\73\14\13\2\0\2\13\2\0\3\13"+
    "\1\46\1\13\1\74\16\13\1\75\13\13\2\0\2\13"+
    "\2\0\3\13\1\46\11\13\1\76\17\13\5\0\1\77"+
    "\1\33\64\0\1\100\53\0\1\101\34\0\1\102\66\0"+
    "\1\103\30\0\1\104\40\0\1\105\42\0\1\106\45\0"+
    "\1\107\27\0\3\13\2\0\1\13\1\110\2\0\3\13"+
    "\1\46\33\13\1\0\42\13\1\0\3\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\111\11\13\2\0\2\13"+
    "\2\0\3\13\1\46\11\13\1\112\22\13\2\0\2\13"+
    "\2\0\3\13\1\46\20\13\1\113\13\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\114\11\13\2\0\2\13"+
    "\2\0\3\13\1\46\23\13\1\115\10\13\2\0\2\13"+
    "\2\0\3\13\1\46\11\13\1\116\22\13\2\0\2\13"+
    "\2\0\3\13\1\46\12\13\1\117\21\13\2\0\2\13"+
    "\2\0\3\13\1\46\21\13\1\120\12\13\2\0\2\13"+
    "\2\0\3\13\1\46\11\13\1\121\22\13\2\0\2\13"+
    "\2\0\1\13\1\122\1\13\1\46\34\13\2\0\2\13"+
    "\2\0\3\13\1\46\14\13\1\123\17\13\2\0\2\13"+
    "\2\0\3\13\1\46\13\13\1\124\10\13\1\125\7\13"+
    "\2\0\2\13\2\0\3\13\1\46\14\13\1\126\17\13"+
    "\2\0\2\13\2\0\3\13\1\46\11\13\1\127\22\13"+
    "\2\0\2\13\2\0\3\13\1\46\20\13\1\130\13\13"+
    "\2\0\2\13\2\0\3\13\1\46\20\13\1\131\13\13"+
    "\2\0\2\13\2\0\3\13\1\46\14\13\1\132\17\13"+
    "\2\0\2\13\2\0\3\13\1\46\5\13\1\133\26\13"+
    "\2\0\2\13\2\0\3\13\1\46\23\13\1\134\10\13"+
    "\2\0\2\13\2\0\3\13\1\46\12\13\1\135\21\13"+
    "\2\0\2\13\2\0\3\13\1\46\23\13\1\136\10\13"+
    "\2\0\2\13\2\0\3\13\1\46\4\13\1\137\24\13"+
    "\6\0\1\140\65\0\1\141\45\0\1\142\40\0\1\143"+
    "\54\0\1\144\52\0\1\145\10\0\3\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\146\11\13\2\0\2\13"+
    "\2\0\3\13\1\46\14\13\1\147\17\13\2\0\2\13"+
    "\2\0\3\13\1\46\14\13\1\150\17\13\2\0\2\13"+
    "\2\0\3\13\1\46\15\13\1\151\16\13\2\0\2\13"+
    "\2\0\3\13\1\46\2\13\1\152\31\13\2\0\2\13"+
    "\2\0\3\13\1\46\21\13\1\153\12\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\154\11\13\2\0\2\13"+
    "\2\0\3\13\1\46\7\13\1\155\24\13\2\0\2\13"+
    "\2\0\3\13\1\46\15\13\1\156\16\13\2\0\2\13"+
    "\2\0\3\13\1\46\4\13\1\157\27\13\2\0\2\13"+
    "\2\0\3\13\1\46\5\13\1\60\26\13\2\0\2\13"+
    "\2\0\3\13\1\46\11\13\1\160\22\13\2\0\2\13"+
    "\2\0\3\13\1\46\5\13\1\161\26\13\2\0\2\13"+
    "\2\0\3\13\1\46\5\13\1\162\26\13\2\0\2\13"+
    "\2\0\3\13\1\46\5\13\1\163\26\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\164\11\13\2\0\2\13"+
    "\2\0\3\13\1\46\3\13\1\165\30\13\2\0\2\13"+
    "\2\0\3\13\1\46\3\13\1\166\30\13\2\0\2\13"+
    "\2\0\3\13\1\46\1\13\1\167\32\13\2\0\2\13"+
    "\2\0\3\13\1\46\12\13\1\170\21\13\2\0\2\13"+
    "\2\0\3\13\1\46\5\13\1\171\26\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\172\6\13\31\0\1\173"+
    "\40\0\1\174\60\0\1\175\30\0\1\176\45\0\1\177"+
    "\23\0\3\13\2\0\2\13\2\0\3\13\1\46\15\13"+
    "\1\200\16\13\2\0\2\13\2\0\2\13\1\201\1\46"+
    "\34\13\2\0\2\13\2\0\3\13\1\46\5\13\1\202"+
    "\26\13\2\0\2\13\2\0\3\13\1\46\23\13\1\203"+
    "\10\13\2\0\2\13\2\0\3\13\1\46\12\13\1\204"+
    "\21\13\2\0\2\13\2\0\3\13\1\46\5\13\1\205"+
    "\26\13\2\0\2\13\2\0\3\13\1\46\23\13\1\206"+
    "\10\13\2\0\2\13\2\0\3\13\1\46\10\13\1\207"+
    "\23\13\2\0\2\13\2\0\3\13\1\46\23\13\1\210"+
    "\10\13\2\0\2\13\2\0\3\13\1\46\21\13\1\211"+
    "\12\13\2\0\2\13\2\0\3\13\1\46\7\13\1\212"+
    "\24\13\2\0\2\13\2\0\3\13\1\46\14\13\1\213"+
    "\17\13\2\0\2\13\2\0\3\13\1\46\14\13\1\214"+
    "\17\13\2\0\2\13\2\0\3\13\1\46\20\13\1\215"+
    "\13\13\2\0\2\13\2\0\3\13\1\46\10\13\1\216"+
    "\23\13\2\0\2\13\2\0\3\13\1\46\20\13\1\217"+
    "\13\13\2\0\2\13\2\0\3\13\1\46\10\13\1\220"+
    "\20\13\13\0\1\221\57\0\1\222\45\0\1\223\51\0"+
    "\1\224\14\0\3\13\2\0\2\13\2\0\3\13\1\46"+
    "\14\13\1\225\17\13\2\0\2\13\2\0\3\13\1\46"+
    "\11\13\1\226\22\13\2\0\2\13\2\0\3\13\1\46"+
    "\20\13\1\227\13\13\2\0\2\13\2\0\3\13\1\46"+
    "\22\13\1\230\11\13\2\0\2\13\2\0\3\13\1\46"+
    "\5\13\1\231\26\13\2\0\2\13\2\0\3\13\1\46"+
    "\20\13\1\232\13\13\2\0\2\13\2\0\3\13\1\46"+
    "\22\13\1\220\11\13\2\0\2\13\2\0\3\13\1\46"+
    "\14\13\1\233\17\13\2\0\2\13\2\0\3\13\1\46"+
    "\3\13\1\234\30\13\2\0\2\13\2\0\3\13\1\46"+
    "\1\13\1\235\32\13\2\0\2\13\2\0\3\13\1\46"+
    "\22\13\1\236\11\13\2\0\2\13\2\0\3\13\1\46"+
    "\22\13\1\60\11\13\2\0\2\13\2\0\3\13\1\46"+
    "\1\13\1\237\32\13\2\0\2\13\2\0\3\13\1\46"+
    "\1\240\33\13\2\0\2\13\2\0\3\13\1\46\5\13"+
    "\1\241\23\13\26\0\1\242\56\0\1\243\45\0\1\244"+
    "\6\0\3\13\2\0\2\13\2\0\3\13\1\46\21\13"+
    "\1\245\12\13\2\0\2\13\2\0\3\13\1\46\27\13"+
    "\1\246\4\13\2\0\2\13\2\0\3\13\1\46\5\13"+
    "\1\247\26\13\2\0\2\13\2\0\3\13\1\46\4\13"+
    "\1\250\27\13\2\0\2\13\2\0\3\13\1\46\1\13"+
    "\1\251\32\13\2\0\2\13\2\0\3\13\1\46\22\13"+
    "\1\252\11\13\2\0\2\13\2\0\3\13\1\46\1\13"+
    "\1\253\32\13\2\0\2\13\2\0\3\13\1\46\11\13"+
    "\1\254\22\13\2\0\2\13\2\0\3\13\1\46\10\13"+
    "\1\255\20\13\44\0\1\256\1\0\3\13\2\0\2\13"+
    "\2\0\3\13\1\46\5\13\1\220\26\13\2\0\2\13"+
    "\2\0\3\13\1\46\16\13\1\257\15\13\2\0\2\13"+
    "\2\0\3\13\1\46\11\13\1\260\22\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\261\11\13\2\0\2\13"+
    "\2\0\3\13\1\46\22\13\1\262\11\13\2\0\2\13"+
    "\2\0\3\13\1\46\15\13\1\263\13\13\22\0\1\264"+
    "\23\0\3\13\2\0\2\13\2\0\3\13\1\46\5\13"+
    "\1\265\26\13\2\0\2\13\2\0\3\13\1\46\15\13"+
    "\1\266\16\13\2\0\2\13\2\0\3\13\1\46\11\13"+
    "\1\267\22\13\2\0\2\13\2\0\3\13\1\46\12\13"+
    "\1\270\21\13\2\0\2\13\2\0\3\13\1\46\14\13"+
    "\1\271\17\13\2\0\2\13\2\0\3\13\1\46\15\13"+
    "\1\272\16\13\2\0\2\13\2\0\3\13\1\46\5\13"+
    "\1\273\26\13\2\0\2\13\2\0\3\13\1\46\14\13"+
    "\1\274\14\13";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5776];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\2\11\17\1\1\11"+
    "\6\1\1\11\4\1\1\0\30\1\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\30\1\1\11\5\0\25\1"+
    "\3\0\1\11\1\0\21\1\2\0\1\11\1\0\15\1"+
    "\1\0\2\11\11\1\1\0\5\1\1\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _DeviceSpecLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DeviceSpecLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 38: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 39: break;
          case 3:
            { return COMMA;
            }
          // fall through
          case 40: break;
          case 4:
            { return NUMERIC_T;
            }
          // fall through
          case 41: break;
          case 5:
            { return COLON;
            }
          // fall through
          case 42: break;
          case 6:
            { return EQUALS;
            }
          // fall through
          case 43: break;
          case 7:
            { return STRING_T;
            }
          // fall through
          case 44: break;
          case 8:
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 45: break;
          case 9:
            { yypushback(yylength()); yybegin(STRING_VALUE);
            }
          // fall through
          case 46: break;
          case 10:
            { return DP;
            }
          // fall through
          case 47: break;
          case 11:
            { yypushback(yylength()); yybegin(STRING_PARAM);
            }
          // fall through
          case 48: break;
          case 12:
            { return PX;
            }
          // fall through
          case 49: break;
          case 13:
            { return ID_KEYWORD;
            }
          // fall through
          case 50: break;
          case 14:
            { return DPI_KEYWORD;
            }
          // fall through
          case 51: break;
          case 15:
            { return CUTOUT_NONE_KEYWORD;
            }
          // fall through
          case 52: break;
          case 16:
            { return SPEC_KEYWORD;
            }
          // fall through
          case 53: break;
          case 17:
            { return CUTOUT_TALL_KEYWORD;
            }
          // fall through
          case 54: break;
          case 18:
            { return TRUE;
            }
          // fall through
          case 55: break;
          case 19:
            { return NAME_KEYWORD;
            }
          // fall through
          case 56: break;
          case 20:
            { return FALSE;
            }
          // fall through
          case 57: break;
          case 21:
            { yypushback(yylength()); yybegin(DIMENSION_PARAM_VALUE);
            }
          // fall through
          case 58: break;
          case 22:
            { return WIDTH_KEYWORD;
            }
          // fall through
          case 59: break;
          case 23:
            { return CUTOUT_CORNER_KEYWORD;
            }
          // fall through
          case 60: break;
          case 24:
            { return CUTOUT_KEYWORD;
            }
          // fall through
          case 61: break;
          case 25:
            { return CUTOUT_DOUBLE_KEYWORD;
            }
          // fall through
          case 62: break;
          case 26:
            { return SQUARE_KEYWORD;
            }
          // fall through
          case 63: break;
          case 27:
            { return HEIGHT_KEYWORD;
            }
          // fall through
          case 64: break;
          case 28:
            { return PARENT_KEYWORD;
            }
          // fall through
          case 65: break;
          case 29:
            { return NAV_BUTTONS_KEYWORD;
            }
          // fall through
          case 66: break;
          case 30:
            { return NAV_GESTURE_KEYWORD;
            }
          // fall through
          case 67: break;
          case 31:
            { return IS_ROUND_KEYWORD;
            }
          // fall through
          case 68: break;
          case 32:
            { return PORTRAIT_KEYWORD;
            }
          // fall through
          case 69: break;
          case 33:
            { return CHIN_SIZE_KEYWORD;
            }
          // fall through
          case 70: break;
          case 34:
            { return LANDSCAPE_KEYWORD;
            }
          // fall through
          case 71: break;
          case 35:
            { return NAVIGATION_KEYWORD;
            }
          // fall through
          case 72: break;
          case 36:
            { return CUTOUT_HOLE_KEYWORD;
            }
          // fall through
          case 73: break;
          case 37:
            { return ORIENTATION_KEYWORD;
            }
          // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
