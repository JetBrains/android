syntax = "proto3";

package google.play.developer.reporting.v1beta1;
import "common.proto";
import "device.proto";
import "metrics.proto";
import "google/protobuf/timestamp.proto";
import "google/type/decimal.proto";
option java_package = "com.google.play.developer.reporting";
option java_outer_classname = "VitalsErrorsServiceProto";
option java_multiple_files = true;

// Reference: https://source.corp.google.com/piper///depot/google3/google/play/developer/reporting/v1main/vitals_errors_service.proto
//
// Service used to access crash reporting data.
service VitalsErrorsService {

  // Searches all error reports received for an app.
  rpc SearchErrorReports(SearchErrorReportsRequest) returns
    (SearchErrorReportsResponse) {
  }

  // Searches all error issues in which reports have been grouped.
  rpc SearchErrorIssues(SearchErrorIssuesRequest) returns
    (SearchErrorIssuesResponse) {
  }

  // Describes the properties of the metrics set.
  rpc GetErrorCountMetricSet(GetErrorCountMetricSetRequest) returns
    (ErrorCountMetricSet) {
  }

  // Queries the metrics in the metrics set.
  rpc QueryErrorCountMetricSet(QueryErrorCountMetricSetRequest) returns
    (QueryErrorCountMetricSetResponse) {
  }
}

// Type of an error report or issue.
enum ErrorType {

  // Unspecified error type.
  ERROR_TYPE_UNSPECIFIED = 0;

  // Application Not Responding (ANR) error.
  //
  // To learn more about this type of errors visit the corresponding
  // Android Developers
  // [documentation][https://developer.android.com/topic/performance/vitals/anr].
  APPLICATION_NOT_RESPONDING = 1;

  // Crash caused by an unhandled exception in Java (or Kotlin or any other
  // JVM language) or a signal in native code such as SIGSEGV.
  CRASH = 2;
}

// An error report received for an app.
//
// There reports are produced by the Android platform code when a (potentially
// fatal) error condition is detected. Identical reports from many
// users will be deduplicated and coalesced into a single ErrorReport.
//
// **Required permissions**: to access this resource, the calling user needs the
// _View app information (read-only)_ permission for the app.
//
// (== resource_for v1beta1.vitals.errors.reports ==)
message ErrorReport {
  // The resource name of the report.
  //
  // Format: apps/{app}/{report}
  string name = 1;

  // Type of the error for which this report was generated.
  ErrorType type = 2;

  // Textual representation of the error report.
  //
  // These textual reports are produced by the platform. The reports are then
  // sanitized and filtered to remove any potentially sensitive information.
  //
  // Although their format is fairly stable, they are not entirely meant for
  // machine consumption and we cannot guarantee that there won't be subtle
  // changes to the formatting that may break systems trying to parse
  // information out of the reports.
  string report_text = 3;

  // The issue this report was associated with.
  //
  // **Please note:** this resource is currently in Alpha.
  // There could be changes to the issue grouping that would result in similar
  // but more recent error reports being assigned to a different issue.
  string issue = 4;

  // Start of the hour during which the latest event in this error report
  // occurred.
  google.protobuf.Timestamp event_time = 5;

  // A device model on which an event in this error report occurred on.
  DeviceModelSummary device_model = 6;

  // The OS version on which an event in this error report occurred on.
  OsVersion os_version = 7;

  // The app version on which an event in this error report occurred on.
  AppVersion app_version = 8;

  // Version control system information from
  // BUNDLE-METADATA/version-control-info.textproto or
  // META-INF/version-control-info.textproto of the app bundle or APK,
  // respectively.
  string vcs_information = 9;
}

// A group of related ErrorReports received for an app.
//
// Similar error reports are grouped together into issues with a likely
// identical root cause.
//
// **Please note:** this resource is currently in Alpha.
// There could be changes to the issue grouping that would result in similar
// but more recent error reports being assigned to different issues.
// This could also cause some issues disappearing entirely and being replaced
// by new ones.
//
// **Required permissions**: to access this resource, the calling user needs the
// _View app information (read-only)_ permission for the app.
//
// (== resource_for v1beta1.vitals.errors.issues ==)
message ErrorIssue {
  // The resource name of the issue.
  //
  // Format: apps/{app}/{issue}
  string name = 1;

  // Type of the errors grouped in this issue.
  ErrorType type = 2;

  // Cause of the issue.
  //
  // Depending on the type this can be either:
  //
  //   * APPLICATION_NOT_RESPONDING: the type of ANR that occurred, e.g.,
  //     'Input dispatching timed out'.
  //   * CRASH: for Java unhandled exception errors, the type of the innermost
  //     exception that was thrown, e.g., IllegalArgumentException. For signals
  //     in native code, the signal that was raised, e.g. SIGSEGV.
  string cause = 3;

  // Location where the issue happened.
  //
  // Depending on the type this can be either:
  //
  //   * APPLICATION_NOT_RESPONDING: the name of the activity or service
  //     that stopped responding.
  //   * CRASH: the likely method name that caused the error.
  string location = 4;

  // The total number of error reports in this issue (only considering
  // occurrences matching the filters and within the requested time
  // period).
  int64 error_report_count = 5;

  // An estimate of the number of unique users who have experienced
  // this issue (only considering occurrences matching the filters and
  // within the requested time period).
  int64 distinct_users = 6;

  // Start of the hour during which the last error report in this issue
  // occurred.
  google.protobuf.Timestamp last_error_report_time = 7;

  // Link to the issue in Android vitals in the Play Console.
  string issue_uri = 8;

  // The smallest OS version in which this error cluster has occurred in the
  // requested time period (only considering occurrences matching the filters
  // and within the requested time period).
  OsVersion first_os_version = 9;

  // The latest OS version in which this error cluster has occurred in the
  // requested time period (only considering occurrences matching the filters
  // and within the requested time period).
  OsVersion last_os_version = 10;

  // The earliest (inclusive) app version appearing in this ErrorIssue in the
  // requested time period (only considering occurrences matching the filters).
  AppVersion first_app_version = 11;

  // The latest (inclusive) app version appearing in this ErrorIssue in the
  // requested time period (only considering occurrences matching the filters).
  AppVersion last_app_version = 12;

  // List of annotations for an issue. Annotations provide additional
  // information that may help in diagnosing and fixing the issue.
  // (-- TODO(b/269246512): Remove visibility restrictions for launch. --)
  repeated IssueAnnotation annotations = 13;

  // An estimated percentage of users affected by any issue that are
  // affected by this issue (only considering occurrences matching the filters
  // and within the requested time period).
  google.type.Decimal distinct_users_percent = 14;

  // Sample error reports which belong to this ErrorIssue.
  // *Note:* currently a maximum of 1 per ErrorIssue is supported.
  // Format: "apps/{app}/{report}"
  repeated string sample_error_reports = 15;
}

// Request to search error reports.
message SearchErrorReportsRequest {

  // Parent resource of the reports, indicating the application for
  // which they were received.
  //
  // Format: apps/{app}
  string parent = 1;

  // The date time interval to search error reports. Both start and end must be
  // hour-aligned and use `UTC` as timezone (or be empty,
  // in which case `UTC` will be used too).
  //
  // If set, only error reports that occurred in the interval will be returned.
  // If unspecified, the default interval of the last 24 hours will be used.
  DateTimeInterval interval = 2;

  // The maximum number of reports to return. The service may return fewer than
  // this value.
  //
  // If unspecified, at most 50 reports will be returned.
  // The maximum value is 100; values above 100 will be coerced to 100.
  int32 page_size = 3;

  // A page token, received from a previous `SearchErrorReports` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `SearchErrorReports` must
  // match the call that provided the page token.
  string page_token = 4;

  // A selection predicate to retrieve only a subset of the reports.
  //
  // For filtering basics, please check [AIP-160](https://google.aip.dev/160).
  //
  // ** Supported field names:**
  //
  // * `apiLevel`: Matches error reports that occurred in the requested
  //    Android versions (specified as the numeric API level) only.
  //    Example: `apiLevel = 28 OR apiLevel = 29`.
  // * `versionCode`: Matches error reports that occurred in the requested
  //    app version codes only.
  //    Example: `versionCode = 123 OR versionCode = 456`.
  // * `deviceModel`: Matches error issues that occurred in the requested
  //    devices.
  //    Example:
  //      `deviceModel = "google/walleye" OR deviceModel = "google/marlin"`.
  // * `deviceBrand`: Matches error issues that occurred in the requested
  //    device brands. Example: `deviceBrand = "Google".
  // * `deviceType`: Matches error reports that occurred in the requested
  //    device types. Example: `deviceType = "PHONE"`.
  // * `errorIssueType`: Matches error reports of the requested types only.
  //    Valid candidates: `JAVA_CRASH`, `NATIVE_CRASH`, `ANR`.
  //    Example: `errorIssueType = JAVA_CRASH OR errorIssueType = NATIVE_CRASH`.
  // * `errorIssueId`: Matches error reports belonging to the requested error
  //    issue ids only.
  //    Example: `errorIssueId = 1234 OR errorIssueId = 4567`.
  // * `errorReportId`: Matches error reports with the requested error report
  //    id.
  //    Example: `errorReportId = 1234 OR errorReportId = 4567`.
  // * `appProcessState`: Matches error reports on the process state of an app,
  //    indicating whether an app runs in the foreground (user-visible) or
  //    background.
  //    Valid candidates: `FOREGROUND`, `BACKGROUND`.
  //    Example: `appProcessState = FOREGROUND`.
  // * `isUserPerceived`: Matches error reports that are user-perceived. It is
  //    not accompanied by any operators.
  //    Example: `isUserPerceived`.
  //
  // ** Supported operators:**
  //
  // * Comparison operators: The only supported comparison operator is equality.
  //   The filtered field must appear on the left hand side of the comparison.
  // * Logical Operators: Logical operators `AND` and `OR` can be used to build
  //   complex filters following a conjunctive normal form (CNF), i.e.,
  //   conjunctions of disjunctions. The `OR` operator takes precedence over
  //   `AND` so the use of parenthesis is not necessary when building CNF.
  //
  // The `OR` operator is only supported to build disjunctions that apply to
  // the same field, e.g., `versionCode = 123 OR versionCode = ANR`. The filter
  // expression `versionCode = 123 OR errorIssueType = ANR` is not valid.
  //
  // ** Examples **
  //
  // Some valid filtering expressions:
  //  * `versionCode = 123 AND errorIssueType = ANR`
  //  * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH`
  //  * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`
  string filter = 5;
}

// Response with a paginated list of error reports matching the search query.
message SearchErrorReportsResponse {

  // Error reports that were found.
  repeated ErrorReport error_reports = 1;

  // Page token to fetch the next page of reports.
  string next_page_token = 2;
}

// Request to search issues grouping error reports.
message SearchErrorIssuesRequest {

  // Parent resource of the error issues, indicating the application for
  // which they were received.
  //
  // Format: apps/{app}
  string parent = 1;

  // The date time interval to search error issues. Both start and end must be
  // hour-aligned and use `UTC` as timezone (or be empty,
  // in which case `UTC` will be used too).
  //
  // If set, only error issues with associated error reports that occurred in
  // the interval will be returned. If unspecified, the default interval of the
  // last 24 hours will be used.
  DateTimeInterval interval = 2;

  // The maximum number of error issues to return. The service may return fewer
  // than this value.
  //
  // If unspecified, at most 50 error issues will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;

  // A page token, received from a previous call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to the request must
  // match the call that provided the page token.
  string page_token = 4;

  // A selection predicate to retrieve only a subset of the issues.
  // Counts in the returned error issues will only reflect occurrences that
  // matched the filter.
  //
  // For filtering basics, please check [AIP-160](https://google.aip.dev/160).
  //
  // ** Supported field names:**
  //
  // * `apiLevel`: Matches error issues that occurred in the requested
  //    Android versions (specified as the numeric API level) only.
  //    Example: `apiLevel = 28 OR apiLevel = 29`.
  // * `versionCode`: Matches error issues that occurred in the requested
  //    app version codes only.
  //    Example: `versionCode = 123 OR versionCode = 456`.
  // * `deviceModel`: Matches error issues that occurred in the requested
  //    devices.
  //    Example:
  //      `deviceModel = "google/walleye" OR deviceModel = "google/marlin"`.
  // * `deviceBrand`: Matches error issues that occurred in the requested
  //    device brands. Example: `deviceBrand = "Google".
  // * `deviceType`: Matches error issues that occurred in the requested
  //    device types. Example: `deviceType = "PHONE"`.
  // * `errorIssueType`: Matches error issues of the requested types only.
  //    Valid candidates: `CRASH`, `ANR`.
  //    Example: `errorIssueType = CRASH OR errorIssueType = ANR`.
  // * `appProcessState`: Matches error issues on the process state of an app,
  //    indicating whether an app runs in the foreground (user-visible) or
  //    background.
  //    Valid candidates: `FOREGROUND`, `BACKGROUND`.
  //    Example: `appProcessState = FOREGROUND`.
  // * `isUserPerceived`: Matches error issues that are user-perceived. It is
  //    not accompanied by any operators.
  //    Example: `isUserPerceived`.
  //
  // ** Supported operators:**
  //
  // * Comparison operators: The only supported comparison operator is equality.
  //   The filtered field must appear on the left hand side of the comparison.
  // * Logical Operators: Logical operators `AND` and `OR` can be used to build
  //   complex filters following a conjunctive normal form (CNF), i.e.,
  //   conjunctions of disjunctions. The `OR` operator takes precedence over
  //   `AND` so the use of parenthesis is not necessary when building CNF.
  //
  // The `OR` operator is only supported to build disjunctions that apply to
  // the same field, e.g., `versionCode = 123 OR errorIssueType = ANR` is not
  // a valid filter.
  //
  // ** Examples **
  //
  // Some valid filtering expressions:
  //  * `versionCode = 123 AND errorIssueType = ANR`
  //  * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH`
  //  * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`
  string filter = 5;

  // Specifies a field that will be used to order the results.
  //
  // ** Supported dimensions:**
  //
  // * `errorReportCount`: Orders issues by number of error reports.
  // * `distinctUsers`: Orders issues by number of unique affected users.
  //
  // ** Supported operations:**
  //
  // * `asc` for ascending order.
  // * `desc` for descending order.
  //
  // Format: A field and an operation, e.g., `errorReportCount desc`
  //
  // *Note:* currently only one field is supported at a time.
  string order_by = 6;

  // Number of sample error reports to return per ErrorIssue.
  // If unspecified, 0 will be used.
  // *Note:* currently only 0 and 1 are supported.
  int32 sample_error_report_limit = 7;
}

// Response with a paginated list of issues that matched the request.
message SearchErrorIssuesResponse {

  // ErrorIssues that were found.
  repeated ErrorIssue error_issues = 1;

  // Continuation token to fetch the next page of data.
  string next_page_token = 2;
}

// Request message for
// [GetErrorCountMetricSet][google.play.developer.reporting.v1beta1.VitalsErrorsService.GetErrorCountMetricSet].
message GetErrorCountMetricSetRequest {

  // Name of the errors metric set.
  //
  // Format: apps/{app}/errorCountMetricSet
  string name = 1;
}

// Singleton resource representing the set of error report metrics.
//
// This metric set contains un-normalized error report counts.
//
// **Supported aggregation periods:**
//
//  * [HOURLY][google.play.developer.reporting.v1beta1.AggregationPeriod.HOURLY]:
//    metrics are aggregated in hourly intervals. The default and only
//    supported timezone is `UTC`.
//  * [DAILY][google.play.developer.reporting.v1beta1.AggregationPeriod.DAILY]:
//    metrics are aggregated in calendar date intervals. The default and only
//    supported timezone is `America/Los_Angeles`.
//
// **Supported metrics:**
//
//  * `errorReportCount` (`google.type.Decimal`): Absolute count of individual
//     error reports that have been received for an app.
//  * `distinctUsers` (`google.type.Decimal`): Count of distinct users
//     for which reports have been received. Care must be taken not to aggregate
//     this count further, as it may result in users being counted multiple
//     times. This value is not rounded, however it may be an approximation.
//
// **Required dimension:**
//
// This dimension must be always specified in all requests in the `dimensions`
// field in query requests.
//
//  * `reportType`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     the type of error. The value should correspond to one of the possible
//     values in
//     [ErrorType][google.play.developer.reporting.v1beta1.ErrorType].
//
// **Supported dimensions:**
//
//  * `apiLevel`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     the API level of Android that was running on the user's device, e.g., 26.
//  * `versionCode`
//     ([int64][google.play.developer.reporting.v1beta1.DimensionValue.int64_value]):
//     version of the app that was running on the user's device.
//  * `deviceModel`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     unique identifier of the user's device model. The form of the
//     identifier is 'deviceBrand/device', where deviceBrand corresponds
//     to Build.BRAND and device corresponds to Build.DEVICE, e.g.,
//     google/coral.
//  * `deviceType`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     identifier of the device's form factor, e.g., PHONE.
//  * `issueId`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     the id an error was assigned to. The value should correspond to the
//     `{issue}` component of the [issue
//     name][google.play.developer.reporting.v1beta1.ErrorIssue.name].
//  * `deviceRamBucket`
//     ([int64][google.play.developer.reporting.v1beta1.DimensionValue.int64_value]):
//     RAM of the device, in MB, in buckets (3GB, 4GB, etc.).
//  *  `deviceSocMake`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Make of the device's primary system-on-chip, e.g., Samsung.
//     [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
//  *  `deviceSocModel`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Model of the device's primary system-on-chip, e.g., "Exynos 2100".
//     [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
//  *  `deviceCpuMake`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Make of the device's CPU, e.g., Qualcomm.
//  *  `deviceCpuModel`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Model of the device's CPU, e.g., "Kryo 240".
//  *  `deviceGpuMake`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Make of the device's GPU, e.g., ARM.
//  *  `deviceGpuModel`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Model of the device's GPU, e.g., Mali.
//  *  `deviceGpuVersion`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Version of the device's GPU, e.g., T750.
//  *  `deviceVulkanVersion`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Vulkan version of the device, e.g., "4198400".
//  *  `deviceGlEsVersion`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     OpenGL ES version of the device, e.g., "196610".
//  *  `deviceScreenSize`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Screen size of the device, e.g., NORMAL, LARGE.
//  *  `deviceScreenDpi`
//     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
//     Screen density of the device, e.g., mdpi, hdpi.
//
// **Required permissions**: to access this resource, the calling user needs the
// _View app information (read-only)_ permission for the app.
//
// **Related metric sets:**
//
//  * [vitals.errors.counts][google.play.developer.reporting.v1beta1.CrashRateMetricSet]
//    contains normalized metrics about Crashes, another stability metric.
//  * [vitals.errors.counts][google.play.developer.reporting.v1beta1.AnrRateMetricSet]
//    contains normalized metrics about ANRs, another stability metric.
//
// (== resource_for v1beta1.vitals.errors.counts ==)
message ErrorCountMetricSet {
  // The resource name.
  //
  // Format: apps/{app}/errorCountMetricSet
  string name = 1;

  // Summary about data freshness in this resource.
  FreshnessInfo freshness_info = 2;
}

// Request message for
// [QueryErrorCountMetricSet][google.play.developer.reporting.v1beta1.VitalsErrorsService.QueryErrorCountMetricSet].
message QueryErrorCountMetricSetRequest {

  // The resource name.
  //
  // Format: apps/{app}/errorCountMetricSet
  string name = 1;

  // Specification of the timeline aggregation parameters.
  //
  // **Supported aggregation periods:**
  //
  //  * [DAILY][google.play.developer.reporting.v1beta1.AggregationPeriod.DAILY]:
  //    metrics are aggregated in calendar date intervals. The default and only
  //    supported timezone is `America/Los_Angeles`.
  TimelineSpec timeline_spec = 2;

  // Dimensions to slice the data by.
  //
  // **Supported dimensions:**
  //
  //  * `apiLevel`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     the API level of Android that was running on the user's device,
  //     e.g., 26.
  //  * `versionCode`
  //     ([int64][google.play.developer.reporting.v1beta1.DimensionValue.int64_value]):
  //     unique identifier of the user's device model. The form of the
  //     identifier is 'deviceBrand/device', where deviceBrand corresponds
  //     to Build.BRAND and device corresponds to Build.DEVICE, e.g.,
  //     google/coral.
  //  * `deviceModel`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     unique identifier of the user's device model.
  //  * `deviceType`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     identifier of the device's form factor, e.g., PHONE.
  //  * `reportType`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     the type of error. The value should correspond to one of the possible
  //     values in
  //     [ErrorType][google.play.developer.reporting.v1beta1.ErrorType].
  //  * `issueId`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     the id an error was assigned to. The value should correspond to the
  //     `{issue}` component of the [issue
  //     name][google.play.developer.reporting.v1beta1.ErrorIssue.name].
  //  * `deviceRamBucket`
  //     ([int64][google.play.developer.reporting.v1beta1.DimensionValue.int64_value]):
  //     RAM of the device, in MB, in buckets (3GB, 4GB, etc.).
  //  *  `deviceSocMake`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Make of the device's primary system-on-chip, e.g., Samsung.
  //     [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
  //  *  `deviceSocModel`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Model of the device's primary system-on-chip, e.g., "Exynos 2100".
  //     [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
  //  *  `deviceCpuMake`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Make of the device's CPU, e.g., Qualcomm.
  //  *  `deviceCpuModel`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Model of the device's CPU, e.g., "Kryo 240".
  //  *  `deviceGpuMake`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Make of the device's GPU, e.g., ARM.
  //  *  `deviceGpuModel`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Model of the device's GPU, e.g., Mali.
  //  *  `deviceGpuVersion`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Version of the device's GPU, e.g., T750.
  //  *  `deviceVulkanVersion`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Vulkan version of the device, e.g., "4198400".
  //  *  `deviceGlEsVersion`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     OpenGL ES version of the device, e.g., "196610".
  //  *  `deviceScreenSize`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Screen size of the device, e.g., NORMAL, LARGE.
  //  *  `deviceScreenDpi`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     Screen density of the device, e.g., mdpi, hdpi.
  repeated string dimensions = 3;

  // Metrics to aggregate.
  //
  // **Supported metrics:**
  //
  //  * `errorReportCount` (`google.type.Decimal`): Absolute count of
  //     individual error reports that have been received for an app.
  //  * `distinctUsers` (`google.type.Decimal`): Count of distinct users
  //     for which reports have been received. Care must be taken not to
  //     aggregate this count further, as it may result in users being counted
  //     multiple times. This value is not rounded, however it may be an
  //     approximation.
  repeated string metrics = 4;

  // Maximum size of the returned data.
  //
  // If unspecified, at most 1000 rows will be returned.
  // The maximum value is 100000; values above 100000 will be coerced to 100000.
  int32 page_size = 5;

  // A page token, received from a previous call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to the request must
  // match the call that provided the page token.
  string page_token = 6;

  // Filters to apply to data. The filtering expression follows
  // [AIP-160](https://google.aip.dev/160) standard and supports filtering
  // by equality of all breakdown dimensions and:
  //
  //  * `isUserPerceived`
  //     ([string][google.play.developer.reporting.v1beta1.DimensionValue.string_value]):
  //     denotes whether error is user perceived or not, USER_PERCEIVED or
  //     NOT_USER_PERCEIVED.
  string filter = 7;
}

// Error counts query response.
message QueryErrorCountMetricSetResponse {

  // Returned rows.
  repeated MetricsRow rows = 1;

  // Continuation token to fetch the next page of data.
  string next_page_token = 2;
}

// Representation of an annotation message for an issue.
message IssueAnnotation {
  // Category that the annotation belongs to. An annotation will belong to a
  // single category. Example categories: "Potential fix", "Insight".
  string category = 1;

  // Title for the annotation.
  string title = 2;

  // Contains the contents of the annotation message.
  string body = 3;
}
